// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	storage "github.com/spmadness/otus-go-hw/hw12_13_14_15_calendar/internal/storage"
	mock "github.com/stretchr/testify/mock"
)

// Storager is an autogenerated mock type for the Storager type
type Storager struct {
	mock.Mock
}

// Close provides a mock function with given fields: ctx
func (_m *Storager) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateEvent provides a mock function with given fields: event
func (_m *Storager) CreateEvent(event storage.Event) error {
	ret := _m.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for CreateEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.Event) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteEvent provides a mock function with given fields: id
func (_m *Storager) DeleteEvent(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEvent provides a mock function with given fields: id
func (_m *Storager) GetEvent(id string) (storage.Event, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetEvent")
	}

	var r0 storage.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (storage.Event, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) storage.Event); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(storage.Event)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEventDay provides a mock function with given fields: date
func (_m *Storager) ListEventDay(date string) ([]storage.Event, error) {
	ret := _m.Called(date)

	if len(ret) == 0 {
		panic("no return value specified for ListEventDay")
	}

	var r0 []storage.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]storage.Event, error)); ok {
		return rf(date)
	}
	if rf, ok := ret.Get(0).(func(string) []storage.Event); ok {
		r0 = rf(date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storage.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEventMonth provides a mock function with given fields: date
func (_m *Storager) ListEventMonth(date string) ([]storage.Event, error) {
	ret := _m.Called(date)

	if len(ret) == 0 {
		panic("no return value specified for ListEventMonth")
	}

	var r0 []storage.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]storage.Event, error)); ok {
		return rf(date)
	}
	if rf, ok := ret.Get(0).(func(string) []storage.Event); ok {
		r0 = rf(date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storage.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEventWeek provides a mock function with given fields: date
func (_m *Storager) ListEventWeek(date string) ([]storage.Event, error) {
	ret := _m.Called(date)

	if len(ret) == 0 {
		panic("no return value specified for ListEventWeek")
	}

	var r0 []storage.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]storage.Event, error)); ok {
		return rf(date)
	}
	if rf, ok := ret.Get(0).(func(string) []storage.Event); ok {
		r0 = rf(date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storage.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Open provides a mock function with given fields: ctx
func (_m *Storager) Open(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateEvent provides a mock function with given fields: id, event
func (_m *Storager) UpdateEvent(id string, event storage.Event) error {
	ret := _m.Called(id, event)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, storage.Event) error); ok {
		r0 = rf(id, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStorager creates a new instance of Storager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorager(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storager {
	mock := &Storager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
